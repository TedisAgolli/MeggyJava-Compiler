
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;



parser code {:

    public PrintWriter out; 
    
    public String programName;
	


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;


/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal program;
non terminal Integer exp;
non terminal IStatement expression;
non terminal IStatement statement;
non terminal IStatement statement_list;
non terminal MainClass main_class;
non terminal BlockStatement block_statement;
non terminal IExp boolExp;
non terminal ifStatement;
non terminal IExp operation;
non terminal IExp boolVal;
non terminal IExp rightSide;

/* Declare precedence and associativity  here declaration


precedence right NOT;
precedence nonassoc LT;
precedence nonassoc EQUAL;
precedence left AND;
precedence left PLUS,MINUS;
precedence left TIMES;
precedence right UMINUS; 
precedence nonassoc ELSE;
precedence nonassoc IF;

/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT:op1 MEGGY SEMI main_class:op {: 

					LinkedList<IClassDecl> _classDecls_ = new LinkedList<IClassDecl>() ;
					 RESULT = new Program(op1.line,op1.pos,op,_classDecls_);
					System.out.println("program");
:}
    ;
    

main_class ::=
        CLASS ID:name         
            {:  

                // Check filename is class name, if not exit with error message

		if(!parser.programName.equals(name+".java"))
		{	System.out.println(parser.programName +  " " + name+".java");

			System.exit(0);}
            :}

	 expression MAIN:op1 LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        LBRACE block_statement:op
          {:

	System.out.println("End of Main");
  	RESULT = new MainClass(op1.line,op1.pos,name+"",param+"",op); 

          :};
	

/* 		
	statement_list:list RBRACE:ex RBRACE {:
				List stList = new ArrayList<IStatement>();
				stList.add(list);
				RESULT = new BlockStatement(ex.line,ex.pos,stList);
			
					:};
                   */

        block_statement::= statement:list RBRACE:ex RBRACE
          {:
          // end of class

   		System.out.println(list+ " end of class");

		 List stList = new ArrayList<IStatement>();
   		stList.add(list);
		RESULT = new BlockStatement(ex.line,ex.pos,stList);



          :}
; 

	expression ::= LBRACE PUBLIC STATIC VOID ;

	statement_list ::= statement:lst SEMI:ex1 statement_list {:	
							
   							 :}

						|statement:op SEMI:ex {:
						
							System.out.println("st list with Semi");	
							 :};
	
					statement ::= MEGGYSETPIXEL:op LPAREN operation:e COMMA operation:e1 COMMA COLOR_LITERAL:e2 RPAREN SEMI statement
						{:	
							System.out.println("SetPix");
							ColorLiteral c = new ColorLiteral(op.line,op.pos,e2.lexeme,e2.value);
	
							RESULT = new MeggySetPixel (op.line,op.pos,e,e1,c);
					
						:}
						|MEGGYDELAY:op LPAREN operation:e RPAREN SEMI statement
						{:	System.out.println("delay");
							RESULT= new MeggyDelay(op.line,op.pos,e);
						:}

						|ifStatement:op 
						{:
						System.out.println("general if");
						  //RESULT= new IfStatement(op.line,op.pos,e,stmt,null);
						:}
					
						|WHILE:op LPAREN boolExp:e RPAREN LBRACE statement_list:stmt RBRACE 
						{:	System.out.println("while");
							RESULT= new WhileStatement(op.line,op.pos,e,stmt);
						:} | {://do nothing:}
						;

					
					operation ::= operation:e PLUS:op rightSide:e1
					{:	
						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e.lexeme,e.value);
						//IntLiteral lit2 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);
						System.out.println("plus");
						RESULT = new PlusExp(op.line, op.pos, e, e1);
					:}
				
					
					|operation:e PLUS:op LPAREN BYTE RPAREN rightSide:e1
					{:	

						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);
										
						System.out.println("plus Byte");
						RESULT = new PlusExp(op.line, op.pos, e,e1);
					:}

					|operation:e PLUS:op LPAREN BYTE RPAREN LPAREN rightSide:e1 RPAREN
					{:	

						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);
										
						System.out.println("plus Byte");
						RESULT = new PlusExp(op.line, op.pos, e,e1);
					:}
					|operation:e PLUS:op LPAREN operation:e1 RPAREN
					{:	
						
						System.out.println("plus operation");
						RESULT = new PlusExp(op.line, op.pos, e,e1);
					:}

					|operation:e TIMES:op rightSide:e1
					{:
						//IntLiteral lit1 = new IntLiteral(e.line,e.pos,e.lexeme,e.value);
						//IntLiteral lit2 = new IntLiteral(e1.line,e1.pos,e1.lexeme,e1.value);
												System.out.println("mult");
						RESULT = new MulExp(op.line, op.pos, e, e1);
					:}
					|operation:e TIMES:op LPAREN BYTE RPAREN rightSide:e1
					{:	

						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);				
						System.out.println("Times byte");
						RESULT = new MulExp(op.line, op.pos, e,e1);
					:}
					|operation:e TIMES:op LPAREN BYTE RPAREN LPAREN rightSide:e1 RPAREN
					{:	

						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);				
						System.out.println("Times byte");
						RESULT = new MulExp(op.line, op.pos, e,e1);
					:}
					|operation:e TIMES:op LPAREN operation:e1 RPAREN
					{:	

						System.out.println("Times operation");
						RESULT = new MulExp(op.line, op.pos, e,e1);
					:}
					|operation:e MINUS:op rightSide:e1
					{:
						//IntLiteral lit1 = new IntLiteral(e.line,e.pos,e.lexeme,e.value);
						//IntLiteral lit2 = new IntLiteral(e1.line,e1.pos,e1.lexeme,e1.value);
												System.out.println("min");
						RESULT = new MinusExp(op.line, op.pos, e, e1);
					:}
					|operation:e MINUS:op LPAREN BYTE RPAREN rightSide:e1
					{:	

						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);
											
						System.out.println("minus Byte");
						RESULT = new MinusExp(op.line, op.pos, e,e1);
					:}
					|operation:e MINUS:op LPAREN BYTE RPAREN LPAREN rightSide:e1 RPAREN
					{:	

						//IntLiteral lit1 = new IntLiteral(op.line,op.pos,e1.lexeme,e1.value);
											
						System.out.println("minus Byte");
						RESULT = new MinusExp(op.line, op.pos, e,e1);
					:}
					|operation:e MINUS:op LPAREN operation:e1 RPAREN
					{:	

						System.out.println("minus operation");
						RESULT = new MinusExp(op.line, op.pos, e,e1);
					:}
					|operation:e LT:op rightSide:e1
					{:
						//IntLiteral lit1 = new IntLiteral(e.line,e.pos,e.lexeme,e.value);
						//IntLiteral lit2 = new IntLiteral(e1.line,e1.pos,e1.lexeme,e1.value);
												System.out.println("lt");
						RESULT = new LtExp(op.line, op.pos, e, e1);
					:}
					
					| LPAREN BYTE:op RPAREN LPAREN operation:e RPAREN
					{:      System.out.println("op to byte");
						RESULT = new ByteCast(op.line, op.pos,e); // change this ...
					:}
					| LPAREN BYTE:op RPAREN rightSide:e 
					{:		
						System.out.println("int to byte");
						//IntLiteral lit1 = new IntLiteral(e.line,e.pos,e.lexeme,e.value);			
						RESULT = new ByteCast(op.line, op.pos,e); // change this ...
					:}
					
					| MINUS:op LPAREN operation:e RPAREN 
					{: 
						System.out.println("umin byte");	
						//IntLiteral lit1 = new IntLiteral(e.line,e.pos,e.lexeme,e.value);
						//RESULT = new NegExp(op.line,op.pos,e);		
					:} %prec UMINUS
					|rightSide | LPAREN rightSide RPAREN  //INT_LITERAL:ex {: RESULT = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); :} 
					;

					rightSide ::=INT_LITERAL | MINUS rightSide  %prec UMINUS;

					boolExp ::=boolExp:e AND:op boolVal:e1
					{:
						System.out.println("and");

						RESULT = new AndExp(op.line, op.pos, e, e1);
					:}
					| boolExp:e EQUAL:op boolVal:e1
					{:
						System.out.println("equal");
						RESULT = new AndExp(op.line, op.pos, e, e1);
					:}|NOT:op boolVal:e
					{:
						System.out.println("not");
						RESULT= new NotExp(op.line,op.pos,e);
					:}| MEGGYCHECKBUTTON LPAREN BUTTON_LITERAL RPAREN
						|MEGGYGETPIXEL:op LPAREN operation:e COMMA operation:e1 RPAREN 
						{:	System.out.println("getPixel");
							RESULT= new MeggyGetPixel(op.line,op.pos,e,e1);
						:}	
					|boolVal
					;
					
					boolVal::=  LPAREN boolExp RPAREN | TRUE | FALSE | COLOR_LITERAL;

				ifStatement ::= IF:op LPAREN boolExp:e RPAREN LBRACE statement_list:e1 RBRACE
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						System.out.printf("cond -> if booleanExp then stmt\n"); 
					:}
					|IF:op LPAREN boolExp:e RPAREN statement:e1 
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						System.out.printf("cond -> if booleanExp then stmt\n"); 
					:} 
 
					| IF:op1 LPAREN boolExp:e RPAREN LBRACE statement_list:e1 RBRACE ELSE LBRACE statement_list:e2 RBRACE 
					{: 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,e2);

					:}
					| IF:op1 LPAREN boolExp:e RPAREN LBRACE statement_list:e1 RBRACE ELSE statement:e2  
					{: 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,e2);

					:}	
					| IF:op1 LPAREN boolExp:e RPAREN LBRACE RBRACE ELSE LBRACE statement_list:e2 RBRACE 
					{: 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,null,e2);

					:}| IF:op1 LPAREN boolExp:e RPAREN LBRACE statement_list:e1 RBRACE ELSE LBRACE RBRACE 
					{: 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,null);

					:}
					| IF:op1 LPAREN boolExp:e RPAREN LBRACE RBRACE ELSE LBRACE RBRACE 
					{: 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,null,null);

					:};


