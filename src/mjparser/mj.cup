
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;



parser code {:

    public PrintWriter out; 
    
    public String programName;
	


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;


/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal program;
non terminal Integer exp;
non terminal IStatement statement;
non terminal List statement_list;
non terminal MainClass main_class;
non terminal BlockStatement block_statement;
non terminal IExp boolExp;
non terminal IExp operation;
non terminal IExp boolVal;
non terminal IExp rightSide;
non terminal IExp op2;
non terminal IStatement ifType;

/* Declare precedence and associativity  here declaration */


precedence right NOT;
precedence nonassoc LT;
precedence nonassoc EQUAL;
precedence left AND;
precedence right BYTE;
precedence left PLUS,MINUS;
precedence left TIMES;
precedence right UMINUS; 
precedence nonassoc ELSE;
precedence nonassoc IF;

/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT:op1 MEGGY SEMI main_class:op {: 

					LinkedList<IClassDecl> _classDecls_ = new LinkedList<IClassDecl>() ;
					 RESULT = new Program(op1.line,op1.pos,op,_classDecls_);
					//System.out.println("program");
:}
    ;
    

main_class ::=
        CLASS ID:name         
            {:  

                // Check filename is class name, if not exit with error message

		if(!parser.programName.equals(name+".java"))
		{	System.out.println("Filename and Classname are different");

			System.exit(0);}
            :}

	 LBRACE PUBLIC STATIC VOID MAIN:op1 LPAREN STRING LBRACKET RBRACKET ID:param RPAREN

         block_statement:op RBRACE
          {:

	//System.out.println("End of Main");
  	RESULT = new MainClass(op1.line,op1.pos,name+"",param+"",op); 

          :} ;
	



	
	


        block_statement::= LBRACE:ex statement_list:list RBRACE 
          {:
          // end of class

   		//System.out.println(" end of class1");
						
		RESULT = new BlockStatement(ex.line,ex.pos,list);


          :} | LBRACE RBRACE ; 



		statement_list ::= statement:op1{:List list = new LinkedList<IStatement>();
							
								list.add(op1);
								RESULT = list;

								:} 
				| statement_list:lst1 statement:op2 
						{:
						List list = new LinkedList<IStatement>();

								if(lst1!=null){						
								list.addAll(lst1);	
								}

								list.add(op2);

							RESULT = list;
								:} ; 

	
	statement ::= MEGGYSETPIXEL:op LPAREN operation:e COMMA operation:e1 COMMA COLOR_LITERAL:e2 RPAREN SEMI 
						{:	
							//System.out.println("Setpixel ");
							ColorLiteral c = new ColorLiteral(op.line,op.pos,e2.lexeme,e2.value);
							RESULT = new MeggySetPixel(op.line,op.pos,e,e1,c);
					
						:}
						|MEGGYDELAY:op LPAREN operation:e RPAREN  SEMI 
						{:	
							//System.out.println("delay");
							RESULT = new MeggyDelay(op.line,op.pos,e);

						:}

					
						|WHILE:op LPAREN operation:e RPAREN block_statement:stmt
						{:	//System.out.println("while");
							RESULT= new WhileStatement(op.line,op.pos,e,stmt);
						:}
					|IF:op LPAREN operation:e RPAREN block_statement:e1
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					:}
					|IF:op LPAREN operation:e RPAREN statement:e1
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					:}
					|IF:op LPAREN operation:e RPAREN statement:e1 ELSE statement:e2
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					:}
					|IF:op LPAREN operation:e RPAREN block_statement:e1 ELSE block_statement:e2
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					:}
					|IF:op LPAREN operation:e RPAREN block_statement:e1 ELSE statement:e2
					{: RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					:}

					 ;


					operation ::= operation:e PLUS:op operation:e1 {:	
						//System.out.println("plus");
						RESULT = new PlusExp(op.line, op.pos, e, e1);

					:} | operation:e MINUS:op operation:e1 {:
						//System.out.println("min");
						RESULT = new MinusExp(op.line, op.pos, e, e1);

					:}| operation:e TIMES:op operation:e1 {:
						//System.out.println("Times");
						RESULT = new MulExp(op.line, op.pos, e, e1);
					:}


					
					
					| MINUS:ex operation:op {:
					RESULT = new NegExp(ex.line,ex.pos,op);
					 //System.out.println("Unary minus");
					:} %prec UMINUS

					|INT_LITERAL:ex 
					{: //System.out.println("int");
					RESULT = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); :}

					|LPAREN operation:e RPAREN{: RESULT =e; :}

					|operation:e AND:op operation:e1
					{:
						//System.out.println("and");

						RESULT = new AndExp(op.line, op.pos, e, e1);
					:}
					| operation:e EQUAL:op operation:e1
					{:
						//System.out.println("equal");
						RESULT = new EqualExp(op.line, op.pos, e, e1);

					:}
					| LPAREN BYTE:op RPAREN LPAREN operation:e RPAREN
 					{:      //System.out.println("op to byte");


						RESULT = new ByteCast(op.line, op.pos,e);
					:}
					| LPAREN BYTE:op RPAREN INT_LITERAL:ex
					{:      //System.out.println("op to byte");

					IntLiteral a = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); 

						RESULT = new ByteCast(op.line, op.pos,a);
					:}

					|NOT:op operation:e
					{:
						//System.out.println("not");
						RESULT= new NotExp(op.line,op.pos,e);
					:}| MEGGYCHECKBUTTON:ex LPAREN BUTTON_LITERAL:op RPAREN 
						{:
						//System.out.println("CheckButton");
						ButtonLiteral b= new ButtonLiteral(ex.line,ex.pos,op.lexeme,op.value);
						RESULT = new MeggyCheckButton(ex.line,ex.pos,b);
						:}

						|MEGGYGETPIXEL:op LPAREN operation:e COMMA operation:e1 RPAREN
						{:	//System.out.println("getPixel");
							RESULT= new MeggyGetPixel(op.line,op.pos,e,e1);
						:}	
					
					| TRUE:op1 {: RESULT = new TrueLiteral(op1.line,op1.pos,op1.lexeme,op1.value);:}

						 | FALSE:op2  {: RESULT = new FalseLiteral(op2.line,op2.pos,op2.lexeme,op2.value);:}

						| COLOR_LITERAL:op {: RESULT = new ColorLiteral(op.line,op.pos,op.lexeme,op.value);
								//System.out.println("Color literal");
								:} 
								| operation:e1 LT:ex operation:e2 {:
									RESULT = new LtExp(ex.line,ex.pos,e1,e2);
									:};  
	


				        // boolExp ::=
					
	


