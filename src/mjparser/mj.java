
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 29 15:02:46 EDT 2016
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 29 15:02:46 EDT 2016
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\007\000\002\022" +
    "\002\000\002\007\022\000\002\010\005\000\002\006\004" +
    "\000\002\006\002\000\002\005\013\000\002\005\007\000" +
    "\002\005\011\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\005\011\000\002\005\011\000\002\005" +
    "\011\000\002\005\004\000\002\005\010\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\010\000\002\012\006\000\002\012" +
    "\004\000\002\012\006\000\002\012\010\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\005\000" +
    "\002\012\003\000\002\012\006\000\002\012\003\000\002" +
    "\012\003\000\002\012\002\000\002\003\010\000\002\003" +
    "\002\000\002\017\014\000\002\017\002\000\002\020\005" +
    "\000\002\020\004\000\002\020\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\017\005\001\002\000\004\002\225\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\206\001\002\000" +
    "\006\002\uffd8\037\013\001\002\000\004\002\000\001\002" +
    "\000\004\061\014\001\002\000\004\011\015\001\002\000" +
    "\006\012\uffd6\032\017\001\002\000\004\012\204\001\002" +
    "\000\020\013\026\014\027\015\023\036\025\047\022\050" +
    "\024\051\020\001\002\000\004\061\uffcc\001\002\000\004" +
    "\061\030\001\002\000\004\061\uffce\001\002\000\004\061" +
    "\uffd0\001\002\000\004\061\uffcd\001\002\000\004\061\uffcf" +
    "\001\002\000\004\061\uffd1\001\002\000\004\061\uffd2\001" +
    "\002\000\004\007\031\001\002\000\024\010\uffd3\013\026" +
    "\014\027\015\023\027\034\036\025\047\022\050\024\051" +
    "\020\001\002\000\004\010\040\001\002\000\004\061\036" +
    "\001\002\000\024\010\uffd3\013\026\014\027\015\023\027" +
    "\034\036\025\047\022\050\024\051\020\001\002\000\004" +
    "\010\uffd4\001\002\000\024\010\uffd3\013\026\014\027\015" +
    "\023\027\034\036\025\047\022\050\024\051\020\001\002" +
    "\000\004\010\uffd5\001\002\000\004\011\041\001\002\000" +
    "\066\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb\020\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031" +
    "\ufffb\033\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067" +
    "\ufffb\001\002\000\066\004\uffda\005\065\006\uffda\007\054" +
    "\012\045\020\053\022\uffda\023\uffda\024\uffda\025\047\026" +
    "\046\030\uffda\031\066\033\050\052\061\054\043\055\067" +
    "\056\070\057\063\060\057\061\055\062\051\063\064\064" +
    "\062\066\052\067\056\001\002\000\004\007\176\001\002" +
    "\000\066\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\020" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc" +
    "\031\ufffc\033\ufffc\052\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\066\ufffc" +
    "\067\ufffc\001\002\000\006\012\uffd6\032\017\001\002\000" +
    "\004\007\171\001\002\000\054\004\uffda\005\065\006\uffda" +
    "\007\054\010\uffda\022\uffda\023\uffda\024\uffda\025\047\027" +
    "\uffda\030\uffda\031\066\056\070\057\063\060\057\061\055" +
    "\062\051\063\064\064\062\066\052\067\056\001\002\000" +
    "\064\004\uffda\005\065\006\uffda\007\054\020\053\022\uffda" +
    "\023\uffda\024\uffda\025\047\026\046\030\uffda\031\066\033" +
    "\050\052\061\054\043\055\067\056\070\057\063\060\057" +
    "\061\055\062\051\063\064\064\062\066\052\067\056\001" +
    "\002\000\024\004\uffe2\005\uffe2\006\uffe2\010\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\027\uffe2\030\uffe2\001\002\000\024\004" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\027\uffdb\030\uffdb\001\002\000\004\007\152\001\002\000" +
    "\052\004\uffda\005\065\006\uffda\007\054\010\uffda\015\143" +
    "\022\uffda\023\uffda\024\uffda\025\047\031\066\056\070\057" +
    "\063\060\057\061\055\062\051\063\064\064\062\066\052" +
    "\067\056\001\002\000\024\004\uffde\005\uffde\006\uffde\010" +
    "\uffde\022\uffde\023\uffde\024\uffde\027\uffde\030\uffde\001\002" +
    "\000\024\004\uffdc\005\uffdc\006\uffdc\010\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\027\uffdc\030\uffdc\001\002\000\024\004\uffeb" +
    "\005\uffeb\006\uffeb\010\uffeb\022\uffeb\023\uffeb\024\uffeb\027" +
    "\uffeb\030\uffeb\001\002\000\020\004\076\005\100\006\101" +
    "\022\074\023\077\024\075\030\135\001\002\000\004\007" +
    "\125\001\002\000\024\004\uffe0\005\uffe0\006\uffe0\010\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\027\uffe0\030\uffe0\001\002\000" +
    "\004\007\122\001\002\000\024\004\uffe1\005\uffe1\006\uffe1" +
    "\010\uffe1\022\uffe1\023\uffe1\024\uffe1\027\uffe1\030\uffe1\001" +
    "\002\000\054\004\uffda\005\065\006\uffda\007\054\010\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\047\027\uffda\030\uffda\031" +
    "\066\056\070\057\063\060\057\061\055\062\051\063\064" +
    "\064\062\066\052\067\056\001\002\000\004\061\116\001" +
    "\002\000\004\007\112\001\002\000\004\007\071\001\002" +
    "\000\050\004\uffda\005\065\006\uffda\007\054\022\uffda\023" +
    "\uffda\024\uffda\025\047\027\uffda\031\066\056\070\057\063" +
    "\060\057\061\055\062\051\063\064\064\062\066\052\067" +
    "\056\001\002\000\020\004\076\005\100\006\101\022\074" +
    "\023\077\024\075\027\073\001\002\000\050\004\uffda\005" +
    "\065\006\uffda\007\054\010\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\047\031\066\056\070\057\063\060\057\061\055\062" +
    "\051\063\064\064\062\066\052\067\056\001\002\000\054" +
    "\004\uffda\005\065\006\uffda\007\054\010\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\047\027\uffda\030\uffda\031\066\056\070" +
    "\057\063\060\057\061\055\062\051\063\064\064\062\066" +
    "\052\067\056\001\002\000\054\004\uffda\005\065\006\uffda" +
    "\007\054\010\uffda\022\uffda\023\uffda\024\uffda\025\047\027" +
    "\uffda\030\uffda\031\066\056\070\057\063\060\057\061\055" +
    "\062\051\063\064\064\062\066\052\067\056\001\002\000" +
    "\054\004\uffda\005\065\006\uffda\007\054\010\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\047\027\uffda\030\uffda\031\066\056" +
    "\070\057\063\060\057\061\055\062\051\063\064\064\062" +
    "\066\052\067\056\001\002\000\054\004\uffda\005\065\006" +
    "\uffda\007\054\010\uffda\022\uffda\023\uffda\024\uffda\025\047" +
    "\027\uffda\030\uffda\031\066\056\070\057\063\060\057\061" +
    "\055\062\051\063\064\064\062\066\052\067\056\001\002" +
    "\000\054\004\uffda\005\065\006\uffda\007\054\010\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\047\027\uffda\030\uffda\031\066" +
    "\056\070\057\063\060\057\061\055\062\051\063\064\064" +
    "\062\066\052\067\056\001\002\000\054\004\uffda\005\065" +
    "\006\uffda\007\054\010\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\047\027\uffda\030\uffda\031\066\056\070\057\063\060\057" +
    "\061\055\062\051\063\064\064\062\066\052\067\056\001" +
    "\002\000\024\004\uffed\005\uffed\006\uffed\010\uffed\022\uffed" +
    "\023\uffed\024\uffed\027\uffed\030\uffed\001\002\000\024\004" +
    "\uffee\005\uffee\006\101\010\uffee\022\uffee\023\uffee\024\uffee" +
    "\027\uffee\030\uffee\001\002\000\022\004\076\005\100\006" +
    "\101\010\uffe8\022\uffe8\024\075\027\uffe8\030\uffe8\001\002" +
    "\000\024\004\uffef\005\uffef\006\101\010\uffef\022\uffef\023" +
    "\uffef\024\uffef\027\uffef\030\uffef\001\002\000\024\004\076" +
    "\005\100\006\101\010\uffe9\022\uffe9\023\uffe9\024\uffe9\027" +
    "\uffe9\030\uffe9\001\002\000\022\004\076\005\100\006\101" +
    "\010\uffdf\023\077\024\075\027\uffdf\030\uffdf\001\002\000" +
    "\020\004\076\005\100\006\101\010\111\022\074\023\077" +
    "\024\075\001\002\000\024\004\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\027\uffe3\030\uffe3\001\002" +
    "\000\050\004\uffda\005\065\006\uffda\007\054\010\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\047\031\066\056\070\057\063" +
    "\060\057\061\055\062\051\063\064\064\062\066\052\067" +
    "\056\001\002\000\020\004\076\005\100\006\101\010\114" +
    "\022\074\023\077\024\075\001\002\000\004\044\115\001" +
    "\002\000\070\004\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\030\ufff9\031\ufff9\033\ufff9\052\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\066\ufff9\067\ufff9\001\002\000\004\007\117\001\002" +
    "\000\004\010\120\001\002\000\024\004\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\022\uffdd\023\uffdd\024\uffdd\027\uffdd\030\uffdd" +
    "\001\002\000\024\004\uffec\005\uffec\006\uffec\010\uffec\022" +
    "\uffec\023\uffec\024\uffec\027\uffec\030\uffec\001\002\000\004" +
    "\065\123\001\002\000\004\010\124\001\002\000\024\004" +
    "\uffe4\005\uffe4\006\uffe4\010\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\050\004\uffda\005\065\006" +
    "\uffda\007\054\022\uffda\023\uffda\024\uffda\025\047\027\uffda" +
    "\031\066\056\070\057\063\060\057\061\055\062\051\063" +
    "\064\064\062\066\052\067\056\001\002\000\020\004\076" +
    "\005\100\006\101\022\074\023\077\024\075\027\127\001" +
    "\002\000\050\004\uffda\005\065\006\uffda\007\054\022\uffda" +
    "\023\uffda\024\uffda\025\047\027\uffda\031\066\056\070\057" +
    "\063\060\057\061\055\062\051\063\064\064\062\066\052" +
    "\067\056\001\002\000\020\004\076\005\100\006\101\022" +
    "\074\023\077\024\075\027\131\001\002\000\004\064\132" +
    "\001\002\000\004\010\133\001\002\000\004\044\134\001" +
    "\002\000\070\004\ufffa\005\ufffa\006\ufffa\007\ufffa\012\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\030\ufffa\031\ufffa\033\ufffa\052\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\066\ufffa\067\ufffa\001\002\000\004\061\136\001\002" +
    "\000\004\007\137\001\002\000\050\004\uffda\005\065\006" +
    "\uffda\007\054\010\uffda\022\uffda\023\uffda\024\uffda\025\047" +
    "\031\066\056\070\057\063\060\057\061\055\062\051\063" +
    "\064\064\062\066\052\067\056\001\002\000\020\004\076" +
    "\005\100\006\101\010\141\022\074\023\077\024\075\001" +
    "\002\000\070\004\ufff0\005\ufff0\006\ufff0\007\ufff0\012\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\030\ufff0\031\ufff0\033\ufff0\052\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\066\ufff0\067\ufff0\001\002\000\020\004\076\005\100" +
    "\006\101\010\151\022\074\023\077\024\075\001\002\000" +
    "\004\010\144\001\002\000\006\007\146\060\145\001\002" +
    "\000\024\004\uffe6\005\uffe6\006\uffe6\010\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\027\uffe6\030\uffe6\001\002\000\050\004\uffda" +
    "\005\065\006\uffda\007\054\010\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\047\031\066\056\070\057\063\060\057\061\055" +
    "\062\051\063\064\064\062\066\052\067\056\001\002\000" +
    "\020\004\076\005\100\006\101\010\150\022\074\023\077" +
    "\024\075\001\002\000\024\004\uffe7\005\uffe7\006\uffe7\010" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\027\uffe7\030\uffe7\001\002" +
    "\000\024\004\uffea\005\uffea\006\uffea\010\uffea\022\uffea\023" +
    "\uffea\024\uffea\027\uffea\030\uffea\001\002\000\050\004\uffda" +
    "\005\065\006\uffda\007\054\010\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\047\031\066\056\070\057\063\060\057\061\055" +
    "\062\051\063\064\064\062\066\052\067\056\001\002\000" +
    "\020\004\076\005\100\006\101\010\154\022\074\023\077" +
    "\024\075\001\002\000\066\004\uffda\005\065\006\uffda\007" +
    "\054\011\156\020\053\022\uffda\023\uffda\024\uffda\025\047" +
    "\026\046\030\uffda\031\066\033\050\052\061\054\043\055" +
    "\067\056\070\057\063\060\057\061\055\062\051\063\064" +
    "\064\062\066\052\067\056\001\002\000\070\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\012\ufff5\020\ufff5\021\165\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\033" +
    "\ufff5\052\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\001" +
    "\002\000\066\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb" +
    "\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030" +
    "\ufffb\031\ufffb\033\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\066" +
    "\ufffb\067\ufffb\001\002\000\070\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\012\ufff6\020\ufff6\021\160\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6\033\ufff6\052\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6\001\002\000\066" +
    "\004\uffda\005\065\006\uffda\007\054\011\156\020\053\022" +
    "\uffda\023\uffda\024\uffda\025\047\026\046\030\uffda\031\066" +
    "\033\050\052\061\054\043\055\067\056\070\057\063\060" +
    "\057\061\055\062\051\063\064\064\062\066\052\067\056" +
    "\001\002\000\070\004\ufff2\005\ufff2\006\ufff2\007\ufff2\012" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\030\ufff2\031\ufff2\033\ufff2\052\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\066\ufff2\067\ufff2\001\002\000\070\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\012\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\033" +
    "\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\067\ufff3\001" +
    "\002\000\066\004\uffda\005\065\006\uffda\007\054\012\164" +
    "\020\053\022\uffda\023\uffda\024\uffda\025\047\026\046\030" +
    "\uffda\031\066\033\050\052\061\054\043\055\067\056\070" +
    "\057\063\060\057\061\055\062\051\063\064\064\062\066" +
    "\052\067\056\001\002\000\070\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\012\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\033\ufffd\052\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\066\ufffd\067\ufffd\001\002\000\064" +
    "\004\uffda\005\065\006\uffda\007\054\020\053\022\uffda\023" +
    "\uffda\024\uffda\025\047\026\046\030\uffda\031\066\033\050" +
    "\052\061\054\043\055\067\056\070\057\063\060\057\061" +
    "\055\062\051\063\064\064\062\066\052\067\056\001\002" +
    "\000\070\004\ufff4\005\ufff4\006\ufff4\007\ufff4\012\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\033\ufff4\052\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\066\ufff4\067\ufff4\001\002\000\070\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\012\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\033\ufff1\052" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\066\ufff1\067\ufff1\001\002\000" +
    "\024\004\076\005\100\006\101\010\uffe5\022\074\023\077" +
    "\024\075\027\uffe5\030\uffe5\001\002\000\050\004\uffda\005" +
    "\065\006\uffda\007\054\010\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\047\031\066\056\070\057\063\060\057\061\055\062" +
    "\051\063\064\064\062\066\052\067\056\001\002\000\020" +
    "\004\076\005\100\006\101\010\173\022\074\023\077\024" +
    "\075\001\002\000\004\011\156\001\002\000\070\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\012\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7" +
    "\033\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\066\ufff7\067\ufff7" +
    "\001\002\000\004\012\uffd7\001\002\000\050\004\uffda\005" +
    "\065\006\uffda\007\054\022\uffda\023\uffda\024\uffda\025\047" +
    "\027\uffda\031\066\056\070\057\063\060\057\061\055\062" +
    "\051\063\064\064\062\066\052\067\056\001\002\000\020" +
    "\004\076\005\100\006\101\022\074\023\077\024\075\027" +
    "\200\001\002\000\050\004\uffda\005\065\006\uffda\007\054" +
    "\010\uffda\022\uffda\023\uffda\024\uffda\025\047\031\066\056" +
    "\070\057\063\060\057\061\055\062\051\063\064\064\062" +
    "\066\052\067\056\001\002\000\020\004\076\005\100\006" +
    "\101\010\202\022\074\023\077\024\075\001\002\000\004" +
    "\044\203\001\002\000\070\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\012\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\030\ufff8\031\ufff8\033\ufff8\052\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\066\ufff8\067\ufff8\001\002\000\006\002" +
    "\uffd8\037\013\001\002\000\004\002\uffd9\001\002\000\004" +
    "\011\uffff\001\002\000\004\011\210\001\002\000\004\032" +
    "\211\001\002\000\004\034\212\001\002\000\004\036\213" +
    "\001\002\000\004\016\214\001\002\000\004\007\215\001" +
    "\002\000\004\035\216\001\002\000\004\041\217\001\002" +
    "\000\004\042\220\001\002\000\004\061\221\001\002\000" +
    "\004\010\222\001\002\000\004\011\156\001\002\000\004" +
    "\012\224\001\002\000\006\002\ufffe\037\ufffe\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\015" +
    "\001\001\000\002\001\001\000\004\021\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\031" +
    "\021\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\034\021\032\001\001\000\002\001\001\000\006" +
    "\020\036\021\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\041\001\001\000\006\005\043\012\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\174\001\001\000\002\001\001\000\004\012\167\001\001" +
    "\000\006\005\166\012\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\071\001\001\000\002\001\001\000\004\012\107\001" +
    "\001\000\004\012\106\001\001\000\004\012\105\001\001" +
    "\000\004\012\104\001\001\000\004\012\103\001\001\000" +
    "\004\012\102\001\001\000\004\012\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\125\001\001\000\002\001\001\000\004\012\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\152\001\001\000\002\001\001\000\010\005\154" +
    "\010\156\012\057\001\001\000\002\001\001\000\004\006" +
    "\162\001\001\000\002\001\001\000\010\005\160\010\161" +
    "\012\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\043\012\057\001\001\000\002\001\001\000\006" +
    "\005\165\012\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\171\001\001\000\002" +
    "\001\001\000\004\010\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\176\001\001\000\002\001\001" +
    "\000\004\012\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\204\001\001\000\002" +
    "\001\001\000\004\022\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;
	


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ButtonType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ColorType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= VOID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new VoidType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= BYTE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ByteType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new BoolType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= INT 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new IntType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formal ::= 
            {
              List RESULT =null;
		List lst = new LinkedList<Formal>();
			RESULT=lst;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formal ::= COMMA formal 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		List lst = new LinkedList<Formal>();
		if (list!=null)
		{
			System.out.println(" formal ::"+list); 
			lst.add(list);
		}
		//lst.add(formal);
		RESULT=lst;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formal ::= type ID formal 
            {
              List RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		List lst = new LinkedList<Formal>();
		Formal formal= new Formal(name.line,name.pos,typ,name.lexeme);
		if (list!=null)
		{
			System.out.println(" formal ::"+list); 
			lst.add(list);
		}
		lst.add(formal);
		RESULT=lst;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // methodDecl ::= 
            {
              MethodDecl RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // methodDecl ::= PUBLIC type ID LPAREN formal RPAREN LBRACE statement_list RBRACE methodDecl 
            {
              MethodDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List param = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List block = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		LinkedList<Formal> _formals = new LinkedList<Formal>();
		_formals.addAll(param);
     		LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();// not required
    		LinkedList<IStatement> _statements = new LinkedList<IStatement>(); //--> blockstatement
		System.out.println("before : list is "+_statements+"  and statement list is "+block );
		_statements.addAll(block);
		System.out.println("After : list is "+_statements+"  and statement list is "+block );
		//if (param==null){
		//param is null
		System.out.println("param is "+_formals+"  and type is "+typ );
		RESULT=new MethodDecl(op.line,op.pos,typ,name+"",_formals,_varDecls,_statements);
		//}else{
		//		System.out.println("param is not null" + param);
		//RESULT=new MethodDecl(op.line,op.pos,typ,name+"",param,_varDecls,block);
		
		//}		
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // otherClass ::= 
            {
              TopClassDecl RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // otherClass ::= CLASS ID LBRACE methodDecl RBRACE otherClass 
            {
              TopClassDecl RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		MethodDecl methods = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();
		LinkedList<MethodDecl> _methodDecls = new LinkedList<MethodDecl>();
		_methodDecls.add(methods);
		RESULT=new TopClassDecl(op1.line,op1.pos,name+"",_varDecls,_methodDecls);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneLiteral(op.line,op.pos,op.lexeme,op.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= THIS 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT= new ThisLiteral(op.line,op.pos,op.lexeme,op.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		RESULT = new NewExp(op.line,op.pos,name+"");
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= ID 
            {
              IExp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(name.line,name.pos,name+"");
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operation ::= operation LT operation 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
									RESULT = new LtExp(ex.line,ex.pos,e1,e2);
									
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operation ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(op.line,op.pos,op.lexeme,op.value);
								//System.out.println("Color literal");
								
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= FALSE 
            {
              IExp RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(op2.line,op2.pos,op2.lexeme,op2.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operation ::= TRUE 
            {
              IExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(op1.line,op1.pos,op1.lexeme,op1.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operation ::= MEGGYGETPIXEL LPAREN operation COMMA operation RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
			//System.out.println("getPixel");
							RESULT= new MeggyGetPixel(op.line,op.pos,e,e1);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operation ::= MEGGYCHECKBUTTON LPAREN BUTTON_LITERAL RPAREN 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
						//System.out.println("CheckButton");
						ButtonLiteral b= new ButtonLiteral(ex.line,ex.pos,op.lexeme,op.value);
						RESULT = new MeggyCheckButton(ex.line,ex.pos,b);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation ::= NOT operation 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("not");
						RESULT= new NotExp(op.line,op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= LPAREN BYTE RPAREN INT_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		      //System.out.println("op to byte");

					IntLiteral a = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); 

						RESULT = new ByteCast(op.line, op.pos,a);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operation ::= LPAREN BYTE RPAREN LPAREN operation RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		      //System.out.println("op to byte");


						RESULT = new ByteCast(op.line, op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation ::= operation EQUAL operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("equal");
						RESULT = new EqualExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= operation AND operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("and");

						RESULT = new AndExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= LPAREN operation RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT =e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 //System.out.println("int");
					RESULT = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation ::= MINUS operation 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp op = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
					RESULT = new NegExp(ex.line,ex.pos,op);
					 //System.out.println("Unary minus");
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation ::= operation TIMES operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("Times");
						RESULT = new MulExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= operation MINUS operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("min");
						RESULT = new MinusExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation ::= operation PLUS operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
						//System.out.println("plus");
						RESULT = new PlusExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= operation DOT ID LPAREN operation RPAREN 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= RETURN statement 
            {
              IStatement RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= IF LPAREN operation RPAREN block_statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement e1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IF LPAREN operation RPAREN block_statement ELSE block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement e1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement e2 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= IF LPAREN operation RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= IF LPAREN operation RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF LPAREN operation RPAREN block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement e1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= WHILE LPAREN operation RPAREN block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement stmt = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			//System.out.println("while");
							RESULT= new WhileStatement(op.line,op.pos,e,stmt);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= MEGGYTONESTART LPAREN operation COMMA operation RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
							//System.out.println("delay");
							RESULT = new MeggyToneStart(op.line,op.pos,e,e2);

						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= MEGGYDELAY LPAREN operation RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
							//System.out.println("delay");
							RESULT = new MeggyDelay(op.line,op.pos,e);

						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= MEGGYSETPIXEL LPAREN operation COMMA operation COMMA COLOR_LITERAL RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue e2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
							//System.out.println("Setpixel ");
							ColorLiteral c = new ColorLiteral(op.line,op.pos,e2.lexeme,e2.value);
							RESULT = new MeggySetPixel(op.line,op.pos,e,e1,c);
					
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= 
            {
              List RESULT =null;
		List list = new LinkedList<IStatement>();
									RESULT = list;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_list ::= statement_list statement 
            {
              List RESULT =null;
		int lst1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lst1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List lst1 = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement op2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						List list = new LinkedList<IStatement>();

								if(lst1!=null){						
								list.addAll(lst1);	
								}

								list.add(op2);

							RESULT = list;
								
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
          // end of class

   		//System.out.println(" end of class1");
						
		RESULT = new BlockStatement(ex.line,ex.pos,list);


          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN block_statement RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement op = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		

	//System.out.println("End of Main");
  	RESULT = new MainClass(op1.line,op1.pos,name+"",param+"",op); 

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
  

                // Check filename is class name, if not exit with error message

		if(!parser.programName.equals(name+".java"))
		{	System.out.println("Filename and Classname are different");

			System.exit(0);}
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class otherClass 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass op = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl p = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 

					LinkedList<IClassDecl> _classDecls = new LinkedList<IClassDecl>() ;
					_classDecls.add(p);
					 RESULT = new Program(op1.line,op1.pos,op,_classDecls);
					//System.out.println("program");

              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

