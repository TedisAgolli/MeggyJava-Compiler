
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 13 00:48:23 EDT 2016
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 13 00:48:23 EDT 2016
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\006\000\002\016" +
    "\002\000\002\006\024\000\002\005\004\000\002\005\003" +
    "\000\002\004\013\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\004\015\000\002\004\013\000\002" +
    "\004\014\000\002\004\014\000\002\004\013\000\002\004" +
    "\007\000\002\004\011\000\002\004\012\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\011\006\000\002\011\010\000\002\011\005\000\002" +
    "\011\004\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\006\000\002\010\010\000\002\010\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\017\005\001\002\000\004\002\160\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\012\001\002\000" +
    "\004\002\000\001\002\000\004\011\uffff\001\002\000\004" +
    "\011\014\001\002\000\004\032\015\001\002\000\004\034" +
    "\016\001\002\000\004\036\017\001\002\000\004\016\020" +
    "\001\002\000\004\007\021\001\002\000\004\035\022\001" +
    "\002\000\004\041\023\001\002\000\004\042\024\001\002" +
    "\000\004\061\025\001\002\000\004\010\026\001\002\000" +
    "\004\011\027\001\002\000\012\020\035\026\034\052\033" +
    "\055\032\001\002\000\014\012\156\020\035\026\034\052" +
    "\033\055\032\001\002\000\014\012\ufffc\020\ufffc\026\ufffc" +
    "\052\ufffc\055\ufffc\001\002\000\004\007\152\001\002\000" +
    "\004\007\142\001\002\000\004\007\134\001\002\000\004" +
    "\007\036\001\002\000\024\005\037\007\052\025\050\056" +
    "\045\057\040\060\043\062\041\063\044\064\047\001\002" +
    "\000\010\005\037\007\052\060\043\001\002\000\004\007" +
    "\130\001\002\000\004\010\uffe1\001\002\000\014\004\062" +
    "\005\063\006\064\023\125\024\124\001\002\000\020\004" +
    "\uffec\005\uffec\006\uffec\010\uffec\023\uffec\024\uffec\027\uffec" +
    "\001\002\000\004\010\uffe0\001\002\000\004\007\117\001" +
    "\002\000\004\010\uffe2\001\002\000\004\010\uffdf\001\002" +
    "\000\010\005\037\007\052\060\043\001\002\000\004\010" +
    "\071\001\002\000\012\005\037\007\052\015\054\060\043" +
    "\001\002\000\012\004\062\005\063\006\064\010\070\001" +
    "\002\000\004\010\055\001\002\000\006\007\057\060\056" +
    "\001\002\000\020\004\uffeb\005\uffeb\006\uffeb\010\uffeb\023" +
    "\uffeb\024\uffeb\027\uffeb\001\002\000\010\005\037\007\052" +
    "\060\043\001\002\000\012\004\062\005\063\006\064\010" +
    "\061\001\002\000\020\004\uffea\005\uffea\006\uffea\010\uffea" +
    "\023\uffea\024\uffea\027\uffea\001\002\000\010\005\037\007" +
    "\052\060\043\001\002\000\010\005\037\007\052\060\043" +
    "\001\002\000\010\005\037\007\052\060\043\001\002\000" +
    "\020\004\uffed\005\uffed\006\uffed\010\uffed\023\uffed\024\uffed" +
    "\027\uffed\001\002\000\020\004\uffee\005\uffee\006\064\010" +
    "\uffee\023\uffee\024\uffee\027\uffee\001\002\000\020\004\uffef" +
    "\005\uffef\006\064\010\uffef\023\uffef\024\uffef\027\uffef\001" +
    "\002\000\020\004\uffe9\005\uffe9\006\uffe9\010\uffe9\023\uffe9" +
    "\024\uffe9\027\uffe9\001\002\000\014\011\072\020\035\026" +
    "\034\052\033\055\032\001\002\000\014\012\077\020\035" +
    "\026\034\052\033\055\032\001\002\000\016\012\ufff2\020" +
    "\ufff2\021\074\026\ufff2\052\ufff2\055\ufff2\001\002\000\012" +
    "\020\035\026\034\052\033\055\032\001\002\000\016\012" +
    "\ufff1\020\ufff1\021\ufff1\026\ufff1\052\ufff1\055\ufff1\001\002" +
    "\000\014\012\107\020\035\026\034\052\033\055\032\001" +
    "\002\000\004\021\100\001\002\000\014\011\101\020\035" +
    "\026\034\052\033\055\032\001\002\000\014\012\104\020" +
    "\035\026\034\052\033\055\032\001\002\000\016\012\ufff0" +
    "\020\ufff0\021\ufff0\026\ufff0\052\ufff0\055\ufff0\001\002\000" +
    "\014\012\106\020\035\026\034\052\033\055\032\001\002" +
    "\000\016\012\ufff3\020\ufff3\021\ufff3\026\ufff3\052\ufff3\055" +
    "\ufff3\001\002\000\014\012\ufffd\020\ufffd\026\ufffd\052\ufffd" +
    "\055\ufffd\001\002\000\016\012\ufff5\020\ufff5\021\ufff5\026" +
    "\ufff5\052\ufff5\055\ufff5\001\002\000\016\012\ufff8\020\ufff8" +
    "\021\110\026\ufff8\052\ufff8\055\ufff8\001\002\000\014\011" +
    "\111\020\035\026\034\052\033\055\032\001\002\000\014" +
    "\012\114\020\035\026\034\052\033\055\032\001\002\000" +
    "\016\012\ufff6\020\ufff6\021\ufff6\026\ufff6\052\ufff6\055\ufff6" +
    "\001\002\000\014\012\115\020\035\026\034\052\033\055" +
    "\032\001\002\000\016\012\ufff4\020\ufff4\021\ufff4\026\ufff4" +
    "\052\ufff4\055\ufff4\001\002\000\016\012\ufff7\020\ufff7\021" +
    "\ufff7\026\ufff7\052\ufff7\055\ufff7\001\002\000\012\004\062" +
    "\005\063\006\064\010\uffe5\001\002\000\010\005\037\007" +
    "\052\060\043\001\002\000\012\004\062\005\063\006\064" +
    "\027\121\001\002\000\010\005\037\007\052\060\043\001" +
    "\002\000\012\004\062\005\063\006\064\010\123\001\002" +
    "\000\004\010\uffe3\001\002\000\010\005\037\007\052\060" +
    "\043\001\002\000\010\005\037\007\052\060\043\001\002" +
    "\000\012\004\062\005\063\006\064\010\uffe6\001\002\000" +
    "\012\004\062\005\063\006\064\010\uffe7\001\002\000\004" +
    "\065\131\001\002\000\004\010\132\001\002\000\004\010" +
    "\uffe4\001\002\000\020\004\uffe8\005\uffe8\006\uffe8\010\uffe8" +
    "\023\uffe8\024\uffe8\027\uffe8\001\002\000\024\005\037\007" +
    "\052\025\050\056\045\057\040\060\043\062\041\063\044" +
    "\064\047\001\002\000\004\010\136\001\002\000\004\011" +
    "\137\001\002\000\012\020\035\026\034\052\033\055\032" +
    "\001\002\000\014\012\141\020\035\026\034\052\033\055" +
    "\032\001\002\000\016\012\ufff9\020\ufff9\021\ufff9\026\ufff9" +
    "\052\ufff9\055\ufff9\001\002\000\010\005\037\007\052\060" +
    "\043\001\002\000\012\004\062\005\063\006\064\027\144" +
    "\001\002\000\010\005\037\007\052\060\043\001\002\000" +
    "\012\004\062\005\063\006\064\027\146\001\002\000\004" +
    "\064\147\001\002\000\004\010\150\001\002\000\004\044" +
    "\151\001\002\000\016\012\ufffb\020\ufffb\021\ufffb\026\ufffb" +
    "\052\ufffb\055\ufffb\001\002\000\010\005\037\007\052\060" +
    "\043\001\002\000\012\004\062\005\063\006\064\010\154" +
    "\001\002\000\004\044\155\001\002\000\016\012\ufffa\020" +
    "\ufffa\021\ufffa\026\ufffa\052\ufffa\055\ufffa\001\002\000\004" +
    "\012\157\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\030\005\027\001\001\000\004\004\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\050\011\041\012\045" +
    "\001\001\000\004\011\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\115\001\001\000\002\001\001\000\004" +
    "\011\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\066\001" +
    "\001\000\004\011\065\001\001\000\004\011\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\072\001\001\000\006\004\030" +
    "\005\075\001\001\000\002\001\001\000\004\004\074\001" +
    "\001\000\002\001\001\000\004\004\104\001\001\000\002" +
    "\001\001\000\004\004\101\001\001\000\006\004\030\005" +
    "\102\001\001\000\002\001\001\000\004\004\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\111\001\001\000\006\004\030" +
    "\005\112\001\001\000\002\001\001\000\004\004\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\117\001\001\000\002\001\001\000\004\011" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\126\001\001\000\004\011\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\134\011" +
    "\041\012\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\030\005\137\001\001\000\004\004\104\001" +
    "\001\000\002\001\001\000\004\011\142\001\001\000\002" +
    "\001\001\000\004\011\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;
	


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolVal ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(op.line,op.pos,op.lexeme,op.value);
								System.out.println("Color literal");
								
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolVal",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolVal ::= FALSE 
            {
              IExp RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(op2.line,op2.pos,op2.lexeme,op2.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolVal",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolVal ::= TRUE 
            {
              IExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(op1.line,op1.pos,op1.lexeme,op1.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolVal",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolExp ::= boolVal 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolExp",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolExp ::= MEGGYGETPIXEL LPAREN operation COMMA operation RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
			System.out.println("getPixel");
							RESULT= new MeggyGetPixel(op.line,op.pos,e,e1);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolExp",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolExp ::= MEGGYCHECKBUTTON LPAREN BUTTON_LITERAL RPAREN 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolExp",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolExp ::= NOT operation 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						System.out.println("not");
						RESULT= new NotExp(op.line,op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolExp",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolExp ::= operation EQUAL operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						System.out.println("equal");
						RESULT = new AndExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolExp",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolExp ::= operation AND operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						System.out.println("and");

						RESULT = new AndExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("boolExp",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation ::= MINUS operation 
            {
              IExp RESULT =null;
		 System.out.println("Unary minus");
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= LPAREN operation RPAREN 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= LPAREN BYTE RPAREN LPAREN operation RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		      System.out.println("op to byte");
						RESULT = new ByteCast(op.line, op.pos,e); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation ::= LPAREN BYTE RPAREN INT_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue e = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		      System.out.println("op to byte");

						IntLiteral lit1 = new IntLiteral(op.line,op.pos,e.lexeme,e.value);
						RESULT = new ByteCast(op.line, op.pos,lit1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 System.out.println("int");
					RESULT = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation ::= operation TIMES operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						System.out.println("Times");
						RESULT = new MulExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= operation MINUS operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						System.out.println("min");
						RESULT = new MinusExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation ::= operation PLUS operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
						System.out.println("plus");
						RESULT = new PlusExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= IF LPAREN boolExp RPAREN LBRACE RBRACE ELSE statement 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,null,e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= IF LPAREN boolExp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,e2);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= IF LPAREN boolExp RPAREN statement 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,null);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IF LPAREN boolExp RPAREN LBRACE RBRACE ELSE LBRACE RBRACE 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,null,null);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= IF LPAREN boolExp RPAREN LBRACE statement_list RBRACE ELSE LBRACE RBRACE 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,null);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= IF LPAREN boolExp RPAREN LBRACE RBRACE ELSE LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,null,e2);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF LPAREN boolExp RPAREN LBRACE statement_list RBRACE ELSE statement 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,e2);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF LPAREN boolExp RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 
						System.out.printf("cond -> if booleanExp then stmt else stmt\n"); 
						RESULT = new IfStatement(op1.line,op1.pos,e,e1,e2);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF LPAREN boolExp RPAREN LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= WHILE LPAREN boolExp RPAREN LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
			System.out.println("while");
							RESULT= new WhileStatement(op.line,op.pos,e,stmt);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= MEGGYDELAY LPAREN operation RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			System.out.println("delay");
							RESULT = new MeggyDelay(op.line,op.pos,e);

						/*
							System.out.println("delay" +lst);
							List list = new LinkedList<IStatement>();
							if(lst!=null){						
								list.add(0,lst);	
							}
							IStatement stmnt = new MeggyDelay(op.line,op.pos,e);
							list.add(stmnt);
									
							RESULT = new BlockStatement (op.line,op.pos,list);*/

						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= MEGGYSETPIXEL LPAREN operation COMMA operation COMMA COLOR_LITERAL RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue e2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			System.out.println("Setpixel ");
							ColorLiteral c = new ColorLiteral(op.line,op.pos,e2.lexeme,e2.value);
							//RESULT = new MeggySetPixel(op.line,op.pos,e,e1,c);

							List list = new LinkedList<IStatement>();

							IStatement stmnt = new MeggySetPixel(op.line,op.pos,e,e1,c);
							list.add(stmnt);				
							RESULT = new BlockStatement (op.line,op.pos,list);
							 
					
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_list ::= statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement op = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						 List stList = new LinkedList<IStatement>();
   					stList.add(op);
					RESULT = new BlockStatement(0,0,stList);
					System.out.println("st list with Semi: "+op);	
			   
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= statement_list statement 
            {
              IStatement RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement op1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement lst = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
					System.out.println("st: "+lst + op1);
 		List stList = new LinkedList<IStatement>();

   		stList.add(lst);
		stList.add(op1);
		RESULT = new BlockStatement(0,0,stList);						
			   
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE statement_list RBRACE RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement op = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		

	System.out.println("End of Main");
  	RESULT = new MainClass(op1.line,op1.pos,name+"",param+"",op); 

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
  

                // Check filename is class name, if not exit with error message

		if(!parser.programName.equals(name+".java"))
		{	System.out.println(parser.programName +  " " + name+".java");

			System.exit(0);}
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass op = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 

					LinkedList<IClassDecl> _classDecls_ = new LinkedList<IClassDecl>() ;
					 RESULT = new Program(op1.line,op1.pos,op,_classDecls_);
					System.out.println("program");

              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

