
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 09 18:36:55 EST 2016
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 09 18:36:55 EST 2016
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\007\000\002\017" +
    "\002\000\002\006\022\000\002\007\005\000\002\005\004" +
    "\000\002\005\005\000\002\005\002\000\002\004\013\000" +
    "\002\004\007\000\002\004\011\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\006" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\010\000\002\010" +
    "\006\000\002\010\006\000\002\010\004\000\002\010\006" +
    "\000\002\010\010\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\003\000\002" +
    "\010\006\000\002\010\003\000\002\010\003\000\002\010" +
    "\010\000\002\003\011\000\002\003\013\000\002\003\002" +
    "\000\002\011\016\000\002\011\002\000\002\012\006\000" +
    "\002\012\004\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\014\002\000" +
    "\002\015\005\000\002\015\002\000\002\016\006\000\002" +
    "\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\017\005\001\002\000\004\002\263\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\244\001\002\000" +
    "\006\002\uffd5\037\uffd5\001\002\000\006\002\000\037\013" +
    "\001\002\000\004\061\014\001\002\000\006\011\015\040" +
    "\016\001\002\000\026\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\032\uffc1\036\uffc1\047\uffc1\050\uffc1\051\uffc1\061\uffc1\001" +
    "\002\000\004\061\017\001\002\000\004\011\020\001\002" +
    "\000\026\012\uffc1\013\uffc1\014\uffc1\015\uffc1\032\uffc1\036" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\061\uffc1\001\002\000\026" +
    "\012\uffd3\013\023\014\022\015\033\032\uffd3\036\024\047" +
    "\031\050\027\051\026\061\030\001\002\000\004\061\uffcf" +
    "\001\002\000\004\061\uffce\001\002\000\004\061\uffcc\001" +
    "\002\000\006\012\036\032\037\001\002\000\004\061\uffc9" +
    "\001\002\000\004\061\uffca\001\002\000\004\061\uffc8\001" +
    "\002\000\004\061\uffcb\001\002\000\004\061\034\001\002" +
    "\000\004\061\uffcd\001\002\000\004\044\035\001\002\000" +
    "\074\005\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\020\uffc2\025\uffc2\026\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\036\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\066\uffc2\067\uffc2\001\002\000\006\002\uffd6" +
    "\037\uffd6\001\002\000\022\013\023\014\022\015\033\036" +
    "\024\047\031\050\027\051\026\061\030\001\002\000\004" +
    "\061\041\001\002\000\004\007\042\001\002\000\024\010" +
    "\uffd0\013\023\014\022\015\033\036\024\047\031\050\027" +
    "\051\026\061\030\001\002\000\004\010\050\001\002\000" +
    "\004\061\045\001\002\000\006\010\uffd1\027\046\001\002" +
    "\000\024\010\uffd0\013\023\014\022\015\033\036\024\047" +
    "\031\050\027\051\026\061\030\001\002\000\004\010\uffd2" +
    "\001\002\000\004\011\051\001\002\000\072\005\uffc1\007" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1" +
    "\025\uffc1\026\uffc1\031\uffc1\033\uffc1\036\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1\067" +
    "\uffc1\001\002\000\072\005\074\007\062\011\063\012\ufffa" +
    "\013\023\014\022\015\033\020\061\025\056\026\055\031" +
    "\076\033\ufffa\036\024\047\031\050\027\051\026\052\070" +
    "\054\053\055\077\056\100\057\073\060\066\061\064\062" +
    "\057\063\075\064\072\066\060\067\065\001\002\000\004" +
    "\007\233\001\002\000\054\005\074\007\062\011\063\012" +
    "\ufffa\020\061\025\056\026\055\031\076\033\ufffa\052\070" +
    "\054\053\055\077\056\100\057\073\060\066\061\174\062" +
    "\057\063\075\064\072\066\060\067\065\001\002\000\004" +
    "\007\226\001\002\000\034\005\074\007\062\025\056\031" +
    "\076\056\100\057\073\060\066\061\103\062\057\063\075" +
    "\064\072\066\060\067\065\001\002\000\026\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\022\uffe0\023\uffe0\024\uffe0\027\uffe0" +
    "\030\uffe0\044\uffe0\001\002\000\026\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9" +
    "\044\uffd9\001\002\000\004\007\210\001\002\000\036\005" +
    "\074\007\062\015\200\025\056\031\076\056\100\057\073" +
    "\060\066\061\103\062\057\063\075\064\072\066\060\067" +
    "\065\001\002\000\052\005\074\007\062\011\063\012\ufffa" +
    "\020\061\025\056\026\055\031\076\052\070\054\053\055" +
    "\077\056\100\057\073\060\066\061\174\062\057\063\075" +
    "\064\072\066\060\067\065\001\002\000\024\004\uffdc\005" +
    "\uffdc\006\uffdc\022\uffdc\023\uffdc\024\uffdc\030\uffdc\045\171" +
    "\061\uffc8\001\002\000\026\004\uffda\005\uffda\006\uffda\010" +
    "\uffda\022\uffda\023\uffda\024\uffda\027\uffda\030\uffda\044\uffda" +
    "\001\002\000\026\004\uffea\005\uffea\006\uffea\010\uffea\022" +
    "\uffea\023\uffea\024\uffea\027\uffea\030\uffea\044\uffea\001\002" +
    "\000\020\004\107\005\111\006\112\022\105\023\110\024" +
    "\106\030\163\001\002\000\004\007\153\001\002\000\006" +
    "\012\uffc3\033\147\001\002\000\026\004\uffde\005\uffde\006" +
    "\uffde\010\uffde\022\uffde\023\uffde\024\uffde\027\uffde\030\uffde" +
    "\044\uffde\001\002\000\004\007\143\001\002\000\034\005" +
    "\074\007\062\025\056\031\076\056\100\057\073\060\066" +
    "\061\103\062\057\063\075\064\072\066\060\067\065\001" +
    "\002\000\026\004\uffdf\005\uffdf\006\uffdf\010\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\027\uffdf\030\uffdf\044\uffdf\001\002\000" +
    "\004\061\137\001\002\000\004\007\133\001\002\000\004" +
    "\007\101\001\002\000\034\005\074\007\062\025\056\031" +
    "\076\056\100\057\073\060\066\061\103\062\057\063\075" +
    "\064\072\066\060\067\065\001\002\000\022\004\107\005" +
    "\111\006\112\022\105\023\110\024\106\027\104\030\113" +
    "\001\002\000\026\004\uffdc\005\uffdc\006\uffdc\010\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\044\uffdc\001\002" +
    "\000\034\005\074\007\062\025\056\031\076\056\100\057" +
    "\073\060\066\061\103\062\057\063\075\064\072\066\060" +
    "\067\065\001\002\000\034\005\074\007\062\025\056\031" +
    "\076\056\100\057\073\060\066\061\103\062\057\063\075" +
    "\064\072\066\060\067\065\001\002\000\034\005\074\007" +
    "\062\025\056\031\076\056\100\057\073\060\066\061\103" +
    "\062\057\063\075\064\072\066\060\067\065\001\002\000" +
    "\034\005\074\007\062\025\056\031\076\056\100\057\073" +
    "\060\066\061\103\062\057\063\075\064\072\066\060\067" +
    "\065\001\002\000\034\005\074\007\062\025\056\031\076" +
    "\056\100\057\073\060\066\061\103\062\057\063\075\064" +
    "\072\066\060\067\065\001\002\000\034\005\074\007\062" +
    "\025\056\031\076\056\100\057\073\060\066\061\103\062" +
    "\057\063\075\064\072\066\060\067\065\001\002\000\034" +
    "\005\074\007\062\025\056\031\076\056\100\057\073\060" +
    "\066\061\103\062\057\063\075\064\072\066\060\067\065" +
    "\001\002\000\004\061\114\001\002\000\004\007\115\001" +
    "\002\000\036\005\074\007\062\010\uffc5\025\056\031\076" +
    "\056\100\057\073\060\066\061\103\062\057\063\075\064" +
    "\072\066\060\067\065\001\002\000\024\004\107\005\111" +
    "\006\112\010\uffc6\022\105\023\110\024\106\027\121\030" +
    "\113\001\002\000\004\010\120\001\002\000\026\004\uffd8" +
    "\005\uffd8\006\uffd8\010\uffd8\022\uffd8\023\uffd8\024\uffd8\027" +
    "\uffd8\030\uffd8\044\uffd8\001\002\000\036\005\074\007\062" +
    "\010\uffc5\025\056\031\076\056\100\057\073\060\066\061" +
    "\103\062\057\063\075\064\072\066\060\067\065\001\002" +
    "\000\004\010\uffc7\001\002\000\026\004\uffec\005\uffec\006" +
    "\uffec\010\uffec\022\uffec\023\uffec\024\uffec\027\uffec\030\113" +
    "\044\uffec\001\002\000\026\004\uffed\005\uffed\006\112\010" +
    "\uffed\022\uffed\023\uffed\024\uffed\027\uffed\030\113\044\uffed" +
    "\001\002\000\026\004\107\005\111\006\112\010\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\027\uffe7\030\113\044\uffe7\001\002" +
    "\000\026\004\uffee\005\uffee\006\112\010\uffee\022\uffee\023" +
    "\uffee\024\uffee\027\uffee\030\113\044\uffee\001\002\000\026" +
    "\004\107\005\111\006\112\010\uffe8\022\105\023\110\024" +
    "\uffe8\027\uffe8\030\113\044\uffe8\001\002\000\026\004\107" +
    "\005\111\006\112\010\uffdd\022\uffdd\023\uffdd\024\uffdd\027" +
    "\uffdd\030\113\044\uffdd\001\002\000\022\004\107\005\111" +
    "\006\112\010\132\022\105\023\110\024\106\030\113\001" +
    "\002\000\026\004\uffe1\005\uffe1\006\uffe1\010\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\027\uffe1\030\uffe1\044\uffe1\001\002\000" +
    "\034\005\074\007\062\025\056\031\076\056\100\057\073" +
    "\060\066\061\103\062\057\063\075\064\072\066\060\067" +
    "\065\001\002\000\022\004\107\005\111\006\112\010\135" +
    "\022\105\023\110\024\106\030\113\001\002\000\004\044" +
    "\136\001\002\000\056\005\ufff8\007\ufff8\011\ufff8\012\ufff8" +
    "\020\ufff8\021\ufff8\025\ufff8\026\ufff8\031\ufff8\033\ufff8\052" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8\001\002\000" +
    "\004\007\140\001\002\000\004\010\141\001\002\000\026" +
    "\004\uffdb\005\uffdb\006\uffdb\010\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\027\uffdb\030\uffdb\044\uffdb\001\002\000\026\004\uffeb" +
    "\005\uffeb\006\uffeb\010\uffeb\022\uffeb\023\uffeb\024\uffeb\027" +
    "\uffeb\030\113\044\uffeb\001\002\000\004\065\144\001\002" +
    "\000\004\010\145\001\002\000\026\004\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\022\uffe2\023\uffe2\024\uffe2\027\uffe2\030\uffe2" +
    "\044\uffe2\001\002\000\004\012\152\001\002\000\034\005" +
    "\074\007\062\025\056\031\076\056\100\057\073\060\066" +
    "\061\103\062\057\063\075\064\072\066\060\067\065\001" +
    "\002\000\022\004\107\005\111\006\112\022\105\023\110" +
    "\024\106\030\113\044\151\001\002\000\004\012\uffc4\001" +
    "\002\000\006\012\uffd4\032\uffd4\001\002\000\034\005\074" +
    "\007\062\025\056\031\076\056\100\057\073\060\066\061" +
    "\103\062\057\063\075\064\072\066\060\067\065\001\002" +
    "\000\022\004\107\005\111\006\112\022\105\023\110\024" +
    "\106\027\155\030\113\001\002\000\034\005\074\007\062" +
    "\025\056\031\076\056\100\057\073\060\066\061\103\062" +
    "\057\063\075\064\072\066\060\067\065\001\002\000\022" +
    "\004\107\005\111\006\112\022\105\023\110\024\106\027" +
    "\157\030\113\001\002\000\034\005\074\007\062\025\056" +
    "\031\076\056\100\057\073\060\066\061\103\062\057\063" +
    "\075\064\072\066\060\067\065\001\002\000\022\004\107" +
    "\005\111\006\112\010\161\022\105\023\110\024\106\030" +
    "\113\001\002\000\004\044\162\001\002\000\056\005\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\020\ufff9\021\ufff9\025\ufff9\026" +
    "\ufff9\031\ufff9\033\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\066" +
    "\ufff9\067\ufff9\001\002\000\004\061\164\001\002\000\004" +
    "\007\165\001\002\000\036\005\074\007\062\010\uffc5\025" +
    "\056\031\076\056\100\057\073\060\066\061\103\062\057" +
    "\063\075\064\072\066\060\067\065\001\002\000\004\010" +
    "\167\001\002\000\022\004\uffd8\005\uffd8\006\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\030\uffd8\044\170\001\002\000\056\005" +
    "\ufff0\007\ufff0\011\ufff0\012\ufff0\020\ufff0\021\ufff0\025\ufff0" +
    "\026\ufff0\031\ufff0\033\ufff0\052\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\066\ufff0\067\ufff0\001\002\000\034\005\074\007\062\025" +
    "\056\031\076\056\100\057\073\060\066\061\103\062\057" +
    "\063\075\064\072\066\060\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\030\113" +
    "\044\173\001\002\000\056\005\uffef\007\uffef\011\uffef\012" +
    "\uffef\020\uffef\021\uffef\025\uffef\026\uffef\031\uffef\033\uffef" +
    "\052\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\066\uffef\067\uffef\001\002" +
    "\000\022\004\uffdc\005\uffdc\006\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\030\uffdc\045\171\001\002\000\004\012\176\001\002" +
    "\000\006\012\ufffb\033\ufffb\001\002\000\022\004\107\005" +
    "\111\006\112\010\207\022\105\023\110\024\106\030\113" +
    "\001\002\000\004\010\201\001\002\000\010\007\204\060" +
    "\203\061\202\001\002\000\026\004\uffe4\005\uffe4\006\uffe4" +
    "\010\uffe4\022\uffe4\023\uffe4\024\uffe4\027\uffe4\030\uffe4\044" +
    "\uffe4\001\002\000\026\004\uffe5\005\uffe5\006\uffe5\010\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\027\uffe5\030\uffe5\044\uffe5\001" +
    "\002\000\034\005\074\007\062\025\056\031\076\056\100" +
    "\057\073\060\066\061\103\062\057\063\075\064\072\066" +
    "\060\067\065\001\002\000\022\004\107\005\111\006\112" +
    "\010\206\022\105\023\110\024\106\030\113\001\002\000" +
    "\026\004\uffe6\005\uffe6\006\uffe6\010\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\027\uffe6\030\uffe6\044\uffe6\001\002\000\026\004" +
    "\uffe9\005\uffe9\006\uffe9\010\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\027\uffe9\030\uffe9\044\uffe9\001\002\000\034\005\074\007" +
    "\062\025\056\031\076\056\100\057\073\060\066\061\103" +
    "\062\057\063\075\064\072\066\060\067\065\001\002\000" +
    "\022\004\107\005\111\006\112\010\212\022\105\023\110" +
    "\024\106\030\113\001\002\000\050\005\074\007\062\011" +
    "\214\020\061\025\056\026\055\031\076\052\070\054\053" +
    "\055\077\056\100\057\073\060\066\061\174\062\057\063" +
    "\075\064\072\066\060\067\065\001\002\000\056\005\ufff4" +
    "\007\ufff4\011\ufff4\012\ufff4\020\ufff4\021\223\025\ufff4\026" +
    "\ufff4\031\ufff4\033\ufff4\052\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\066" +
    "\ufff4\067\ufff4\001\002\000\052\005\074\007\062\011\063" +
    "\012\ufffa\020\061\025\056\026\055\031\076\052\070\054" +
    "\053\055\077\056\100\057\073\060\066\061\174\062\057" +
    "\063\075\064\072\066\060\067\065\001\002\000\056\005" +
    "\ufff5\007\ufff5\011\ufff5\012\ufff5\020\ufff5\021\216\025\ufff5" +
    "\026\ufff5\031\ufff5\033\ufff5\052\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\066\ufff5\067\ufff5\001\002\000\050\005\074\007\062\011" +
    "\214\020\061\025\056\026\055\031\076\052\070\054\053" +
    "\055\077\056\100\057\073\060\066\061\174\062\057\063" +
    "\075\064\072\066\060\067\065\001\002\000\056\005\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\020\ufff1\021\ufff1\025\ufff1\026" +
    "\ufff1\031\ufff1\033\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066" +
    "\ufff1\067\ufff1\001\002\000\056\005\ufff2\007\ufff2\011\ufff2" +
    "\012\ufff2\020\ufff2\021\ufff2\025\ufff2\026\ufff2\031\ufff2\033" +
    "\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\067\ufff2\001" +
    "\002\000\004\012\222\001\002\000\056\005\ufffd\007\ufffd" +
    "\011\ufffd\012\ufffd\020\ufffd\021\ufffd\025\ufffd\026\ufffd\031" +
    "\ufffd\033\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\067" +
    "\ufffd\001\002\000\046\005\074\007\062\020\061\025\056" +
    "\026\055\031\076\052\070\054\053\055\077\056\100\057" +
    "\073\060\066\061\174\062\057\063\075\064\072\066\060" +
    "\067\065\001\002\000\056\005\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\020\ufff3\021\ufff3\025\ufff3\026\ufff3\031\ufff3\033\ufff3" +
    "\052\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\067\ufff3\001\002" +
    "\000\026\004\107\005\111\006\112\010\uffe3\022\105\023" +
    "\110\024\106\027\uffe3\030\113\044\uffe3\001\002\000\034" +
    "\005\074\007\062\025\056\031\076\056\100\057\073\060" +
    "\066\061\103\062\057\063\075\064\072\066\060\067\065" +
    "\001\002\000\022\004\107\005\111\006\112\010\230\022" +
    "\105\023\110\024\106\030\113\001\002\000\004\011\214" +
    "\001\002\000\056\005\ufff6\007\ufff6\011\ufff6\012\ufff6\020" +
    "\ufff6\021\ufff6\025\ufff6\026\ufff6\031\ufff6\033\ufff6\052\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6\001\002\000\006" +
    "\012\ufffc\033\ufffc\001\002\000\034\005\074\007\062\025" +
    "\056\031\076\056\100\057\073\060\066\061\103\062\057" +
    "\063\075\064\072\066\060\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\027\235" +
    "\030\113\001\002\000\034\005\074\007\062\025\056\031" +
    "\076\056\100\057\073\060\066\061\103\062\057\063\075" +
    "\064\072\066\060\067\065\001\002\000\022\004\107\005" +
    "\111\006\112\010\237\022\105\023\110\024\106\030\113" +
    "\001\002\000\004\044\240\001\002\000\056\005\ufff7\007" +
    "\ufff7\011\ufff7\012\ufff7\020\ufff7\021\ufff7\025\ufff7\026\ufff7" +
    "\031\ufff7\033\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\066\ufff7" +
    "\067\ufff7\001\002\000\026\012\uffd3\013\023\014\022\015" +
    "\033\032\uffd3\036\024\047\031\050\027\051\026\061\030" +
    "\001\002\000\006\012\243\032\037\001\002\000\006\002" +
    "\uffd7\037\uffd7\001\002\000\004\011\uffff\001\002\000\004" +
    "\011\246\001\002\000\004\032\247\001\002\000\004\034" +
    "\250\001\002\000\004\036\251\001\002\000\004\016\252" +
    "\001\002\000\004\007\253\001\002\000\004\035\254\001" +
    "\002\000\004\041\255\001\002\000\004\042\256\001\002" +
    "\000\004\061\257\001\002\000\004\010\260\001\002\000" +
    "\004\011\214\001\002\000\004\012\262\001\002\000\006" +
    "\002\ufffe\037\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\020\001\001\000\006\011\024\013\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\042\013\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\046\013\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\051" +
    "\001\001\000\012\004\053\005\070\010\066\013\031\001" +
    "\001\000\002\001\001\000\010\004\053\005\231\010\066" +
    "\001\001\000\002\001\001\000\004\010\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\176\001\001\000\010\004\053\005\174\010\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\130\001\001\000" +
    "\004\010\127\001\001\000\004\010\126\001\001\000\004" +
    "\010\125\001\001\000\004\010\124\001\001\000\004\010" +
    "\123\001\001\000\004\010\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\115\014\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\115\014\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\153\001\001\000" +
    "\002\001\001\000\004\010\155\001\001\000\002\001\001" +
    "\000\004\010\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\115\014\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\210\001\001\000" +
    "\002\001\001\000\010\004\212\007\214\010\066\001\001" +
    "\000\002\001\001\000\010\004\053\005\220\010\066\001" +
    "\001\000\002\001\001\000\010\004\216\007\217\010\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\223\010\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\226\001" +
    "\001\000\002\001\001\000\004\007\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\233\001\001\000" +
    "\002\001\001\000\004\010\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\241\013" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;
	


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // varibleDecl ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		
		RESULT =new LinkedList<VarDecl>();
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("varibleDecl",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // varibleDecl ::= varibleDecl type ID SEMI 
            {
              LinkedList<VarDecl> RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> varList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();		
		VarDecl var = new VarDecl(name.line,name.pos,typ,name.lexeme);
		if(varList!=null)
			_varDecls.addAll(varList);		
		_varDecls.add(var);
		RESULT = _varDecls;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("varibleDecl",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // returnStatement ::= 
            {
              IExp RESULT =null;
		//System.out.println("no return type"); 
RESULT=null;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatement",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // returnStatement ::= RETURN operation SEMI 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp op = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		//System.out.println("return statement : "+ op);
RESULT = op; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatement",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= 
            {
              LinkedList<IExp> RESULT =null;
		
	RESULT= new LinkedList<IExp>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= operation 
            {
              LinkedList<IExp> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp op = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	LinkedList list = new LinkedList<IExp>();
	list.add(op);
	//System.out.println("Single parameter");
	RESULT= list;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args ::= operation COMMA args 
            {
              LinkedList<IExp> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp op = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IExp> lst = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	LinkedList list = new LinkedList<IExp>();
	if(lst!=null){
		list.addAll(lst);
	}
	list.add(op);
	RESULT= list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ClassType(op.line,op.pos,op.lexeme);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ButtonType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ColorType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= VOID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new VoidType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= BYTE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ByteType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new BoolType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= INT 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new IntType(op.line,op.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formal ::= 
            {
              LinkedList<Formal> RESULT =null;
		LinkedList lst = new LinkedList<Formal>();
			//System.out.println(" inside empty parameter list is "+lst);
		RESULT=lst;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // formal ::= type ID 
            {
              LinkedList<Formal> RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("type");
		LinkedList lst = new LinkedList<Formal>();
		Formal formal= new Formal(name.line,name.pos,typ,name.lexeme);
		lst.add(formal);
		RESULT=lst;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // formal ::= type ID COMMA formal 
            {
              LinkedList<Formal> RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		LinkedList lst = new LinkedList<Formal>();
		Formal formal= new Formal(name.line,name.pos,typ,name.lexeme);
		//System.out.println("type,formal");		
		if (list!=null)
		{
			//System.out.println(" formal ::"+list); 
			lst.addAll(list);
		}
		lst.add(formal);
		//System.out.println(" inside parameter list is "+lst+"  and param is " +formal);
		
		RESULT=lst;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // methodDecl ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
		RESULT=  new LinkedList<MethodDecl>();
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // methodDecl ::= methodDecl PUBLIC type ID LPAREN formal RPAREN LBRACE varibleDecl statement_list returnStatement RBRACE 
            {
              LinkedList<MethodDecl> RESULT =null;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<Formal> param = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> var = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List block = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rstmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rstmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp rstmt = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		LinkedList<Formal> _formals = new LinkedList<Formal>();
		_formals.addAll(param);
     		LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();// not required
    		LinkedList<IStatement> _statements = new LinkedList<IStatement>(); //--> blockstatement
		//System.out.println(" method is "+name.lexeme );
		_statements.addAll(block);
		if(var!=null){
		_varDecls.addAll(var);
		}
		MethodDecl method=new MethodDecl(op.line,op.pos,typ,name+"",_formals,_varDecls,_statements,rstmt);
		LinkedList<MethodDecl> methodList = new LinkedList<MethodDecl>();
		if (methods!=null)
			methodList.addAll(methods);
		methodList.add(method);
		RESULT=methodList;
		
				
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // otherClass ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
		LinkedList<IClassDecl> classDecl = new LinkedList<IClassDecl>();
		//LinkedList<MethodDecl> _methodDecls = new LinkedList<MethodDecl>();
		//_methodDecls.add(methods);
		//RESULT=new TopClassDecl(0,0,"",_varDecls,_methodDecls);
		RESULT = classDecl;		
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // otherClass ::= otherClass CLASS ID EXTENDS ID LBRACE varibleDecl methodDecl RBRACE 
            {
              LinkedList<IClassDecl> RESULT =null;
		int otherleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		LinkedList<IClassDecl> other = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue parent = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> var = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();
		LinkedList<MethodDecl> _methodDecls = new LinkedList<MethodDecl>();
		//System.out.println("before : class is "+_methodDecls+"  and statement list is "+methods );
		if(var!=null){
		_varDecls.addAll(var);
		}
		if(methods!=null){
		_methodDecls.addAll(methods);
		}
		//System.out.println(" class is "+name );		
		LinkedList<IClassDecl> classDecl = new LinkedList<IClassDecl>();
		ChildClassDecl classdec = new ChildClassDecl(op1.line,op1.pos,name+"",parent+"",_varDecls,_methodDecls);
		classDecl.add((IClassDecl)classdec);
		if(other!=null){
			classDecl.addAll(other);
		}			
		RESULT = classDecl;		
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // otherClass ::= otherClass CLASS ID LBRACE varibleDecl methodDecl RBRACE 
            {
              LinkedList<IClassDecl> RESULT =null;
		int otherleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<IClassDecl> other = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> var = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();
		LinkedList<MethodDecl> _methodDecls = new LinkedList<MethodDecl>();
		//System.out.println("before : class is "+_methodDecls+"  and statement list is "+methods );
		if(var!=null){
		_varDecls.addAll(var);
		}
		if(methods!=null){
		_methodDecls.addAll(methods);
		}
		
		//System.out.println(" class is "+name );		
		LinkedList<IClassDecl> classDecl = new LinkedList<IClassDecl>();
		TopClassDecl classdec = new TopClassDecl(op1.line,op1.pos,name+"",_varDecls,_methodDecls);
		classDecl.add((IClassDecl)classdec);
		if(other!=null){
			classDecl.addAll(other);
		}			
		RESULT = classDecl;		
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation DOT ID LPAREN args RPAREN 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int _argsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int _argsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> _args = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
						RESULT = new CallExp(name.line,name.pos,e1,name.lexeme,_args);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneLiteral(op.line,op.pos,op.lexeme,op.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= THIS 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT= new ThisLiteral(op.line,op.pos,op.lexeme,op.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		RESULT = new NewExp(op.line,op.pos,name+"");
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= ID 
            {
              IExp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(name.line,name.pos,name+"");
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= operation LT operation 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
									RESULT = new LtExp(ex.line,ex.pos,e1,e2);
									
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(op.line,op.pos,op.lexeme,op.value);
								//System.out.println("Color literal");
								
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operation ::= FALSE 
            {
              IExp RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(op2.line,op2.pos,op2.lexeme,op2.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operation ::= TRUE 
            {
              IExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(op1.line,op1.pos,op1.lexeme,op1.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= MEGGYGETPIXEL LPAREN operation COMMA operation RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
			//System.out.println("getPixel");
							RESULT= new MeggyGetPixel(op.line,op.pos,e,e1);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operation ::= MEGGYCHECKBUTTON LPAREN BUTTON_LITERAL RPAREN 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
						//System.out.println("CheckButton");
						ButtonLiteral b= new ButtonLiteral(ex.line,ex.pos,op.lexeme,op.value);
						RESULT = new MeggyCheckButton(ex.line,ex.pos,b);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operation ::= NOT operation 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("not");
						RESULT= new NotExp(op.line,op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operation ::= LPAREN BYTE RPAREN ID 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		      //System.out.println("op to byte operation");
					IdLiteral e =  new IdLiteral(ex.line,ex.pos,ex+"");

						RESULT = new ByteCast(op.line, op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation ::= LPAREN BYTE RPAREN INT_LITERAL 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		      //System.out.println("op to byte operation");
					IntLiteral e =  new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value);

						RESULT = new ByteCast(op.line, op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= LPAREN BYTE RPAREN LPAREN operation RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		     // System.out.println("op to byte operation");


						RESULT = new ByteCast(op.line, op.pos,e);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operation ::= operation EQUAL operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("equal");
						RESULT = new EqualExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation ::= operation AND operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("and");

						RESULT = new AndExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= LPAREN operation RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT =e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 //System.out.println("int");
					RESULT = new IntLiteral(ex.line,ex.pos,ex.lexeme,ex.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation ::= MINUS operation 
            {
              IExp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp op = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
					RESULT = new NegExp(ex.line,ex.pos,op);
					 //System.out.println("Unary minus");
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation ::= operation TIMES operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("Times");
						RESULT = new MulExp(op.line, op.pos, e, e1);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation ::= operation MINUS operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						//System.out.println("min");
						RESULT = new MinusExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= operation PLUS operation 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
						//System.out.println("plus");
						RESULT = new PlusExp(op.line, op.pos, e, e1);

					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= ID ASSIGN operation SEMI 
            {
              IStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp op = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
					RESULT = new AssignStatement(name.line,name.pos, name.lexeme,op);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= operation DOT ID LPAREN args RPAREN SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int _argsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int _argsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> _args = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
					RESULT = new CallStatement(name.line,name.pos,e1,name.lexeme,_args);
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= IF LPAREN operation RPAREN block_statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement e1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= IF LPAREN operation RPAREN block_statement ELSE block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement e1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement e2 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IF LPAREN operation RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,e2);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= IF LPAREN operation RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement e1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= IF LPAREN operation RPAREN block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement e1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,e,e1,null);
						//System.out.printf("cond -> if booleanExp then stmt\n"); 
					
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= WHILE LPAREN operation RPAREN block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement stmt = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			//System.out.println("while");
							RESULT= new WhileStatement(op.line,op.pos,e,stmt);
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= MEGGYTONESTART LPAREN operation COMMA operation RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
							//System.out.println("delay");
							RESULT = new MeggyToneStart(op.line,op.pos,e,e2);

						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= MEGGYDELAY LPAREN operation RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
							//System.out.println("delay");
							RESULT = new MeggyDelay(op.line,op.pos,e);

						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= MEGGYSETPIXEL LPAREN operation COMMA operation COMMA operation RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
							//System.out.println("Setpixel ");
							//ColorLiteral c = new ColorLiteral(op.line,op.pos,e2.lexeme,e2.value);
							RESULT = new MeggySetPixel(op.line,op.pos,e,e1,e2);
					
						
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              List RESULT =null;
		LinkedList list = new LinkedList<IStatement>();
									RESULT = list;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= LBRACE statement_list RBRACE 
            {
              List RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List list1 = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		List list = new LinkedList<IStatement>();
								if(list1!=null){						
								list.addAll(list1);	
								}

								RESULT = list;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_list ::= statement statement_list 
            {
              List RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement op2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int lst1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int lst1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List lst1 = (List)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
						List list = new LinkedList<IStatement>();

								if(lst1!=null){						
								list.addAll(lst1);	
								}
								//System.out.println("statement "+op2);
if(op2!=null){
								list.add(op2);
}
							RESULT = list;
								
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue ex = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
          // end of class

   		//System.out.println(" main");
						
		RESULT = new BlockStatement(ex.line,ex.pos,list);


          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN block_statement RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement op = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		

	//System.out.println("End of Main");
  	RESULT = new MainClass(op1.line,op1.pos,name+"",param+"",op); 

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
  

                // Check filename is class name, if not exit with error message

		if(!parser.programName.equals(name+".java"))
		{	System.out.println("Filename and Classname are different");

			System.exit(0);}
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class otherClass 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass op = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> p = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 

					LinkedList<IClassDecl> _classDecls = new LinkedList<IClassDecl>() ;
					_classDecls.addAll(p);
					 RESULT = new Program(op1.line,op1.pos,op,_classDecls);
					//System.out.println("program");

              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

